@use '../../styles/mixins' as *;
@use '../../styles/helpers' as *;
@use 'sass:math';

.root {
  // `{ display: flex; flex-direction: column }` are required to be paired with `thin-scrollbar` for one of the child elements,
  // so that scrolling works when one of the parent elements is given an explicit height.
  @include flex($justify: null, $align: null, $direction: column);

  width: 100%;

  .content {
    @include flex($justify: null, $direction: column);

    padding-top: 32px;
  }

  .error {
    margin-top: -10px;
    margin-bottom: 24px;
    padding-block: em(6);
    text-align: center;
  }
}

.adaptivePaddingBox {
  // TODO: add mixin for adaptive property customizations
  // By increasing `max-device-size` by a coefficient,
  // we “stretch” the range over which the adaptive padding value increment will occur.
  // Thus the value will grow more smoothly.
  $wrapper-adaptive-padding: get-adaptive-size(
    $min-size: 0,
    $max-size: 48,
    $min-device-size: get-breakpoint('mobile-l'),
    $max-device-size: get-breakpoint('tablet-s') + 130,
    $unit: 1px,
  );

  display: grid;
  width: 100%;
  padding-inline: clamp(0px, $wrapper-adaptive-padding, 15%);
}

.placeholder {
  &Background {
    @include flex;

    aspect-ratio: 1;
    margin-bottom: 35px;
    background-color: var(--color-dark-500);
  }

  &Icon {
    aspect-ratio: 1;
    width: max(em(24), 21.5%);
    height: auto;
  }
}

.buttonsGroup {
  display: grid;
  gap: em(16);
  margin-bottom: 30px;

  @include media-breakpoint('mobile-l') {
    width: 100%;

    .button {
      min-height: em(48);
    }
  }
}
