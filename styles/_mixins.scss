@use 'helpers' as *;
@use 'sass:selector';

@mixin flex($justify: center, $align: center, $direction: null, $wrap: null) {
  display: flex;
  flex-flow: $direction $wrap;
  align-items: $align;
  justify-content: $justify;
}

// TODO: replace all flex-mixin calls followed by inline-flex with this mixin.
// Also replace all `display: flex` properties in the app with `flex` mixin.
@mixin inline-flex($args...) {
  @include flex($args...);

  display: inline-flex;
}

@mixin media-breakpoint($bp-name, $approach: 'desktop-first') {
  $media-query: null;

  @if $approach == 'desktop-first' {
    $media-query: 'width <= #{get-breakpoint($bp-name) * 1px}';
  } @else if $approach == 'mobile-first' {
    $media-query: 'width >= #{get-breakpoint($bp-name) * 1px}';
  } @else {
    @error 'Provided `$approach` parameter should be either `desktop-first` or `mobile-first`';
  }

  @media ($media-query) {
    @content;
  }
}

@mixin text-overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }

  @media (hover: none) {
    &:active {
      @content;
    }
  }
}

@mixin common-scrollbar {
  @at-root #{selector.append(&, '::-webkit-scrollbar')} {
    background-color: var(--scrollbar-bg-color);
  }

  @at-root #{selector.append(&, '::-webkit-scrollbar-thumb')} {
    background-color: var(--scrollbar-thumb-bg-color);

    &:hover {
      background-color: var(--scrollbar-thumb-bg-color-hover);
    }

    &:active {
      background-color: var(--scrollbar-thumb-bg-color-active);
    }
  }
}

// A mixin used to align the styles of a thin scrollbar in different browsers.
@mixin thin-common-scrollbar {
  @supports not selector(::-webkit-scrollbar) {
    scrollbar-width: thin;
  }

  @include common-scrollbar;

  @at-root #{selector.append(&, '::-webkit-scrollbar')} {
    width: var(--thin-scrollbar-width);
    height: var(--thin-scrollbar-height);
  }
}
